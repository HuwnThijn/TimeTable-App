const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const User = require('../models/User');
const OtpVeri    res.json({ message: 'Email verified successfully' });
    } catch (error) {
        console.log('Verify OTP error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.forgetPassword = async (req, res) => {
    try {
        const { email } = req.body;

        if (!email) {
            return res.status(400).json({ message: 'Email is required' });
        }

        // Check if user exists
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        // Generate reset token
        const resetToken = crypto.randomBytes(32).toString('hex');
        const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 hour

        // Save reset token to database
        await PasswordReset.findOneAndUpdate(
            { email },
            { resetToken, expiresAt },
            { upsert: true, new: true }
        );

        const html = `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2196F3; margin-bottom: 10px;">TimeTable App</h1>
                <h2 style="color: #333; margin-bottom: 20px;">Đặt lại mật khẩu</h2>
            </div>
            
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                    Chào bạn,
                </p>
                <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                    Bạn đã yêu cầu đặt lại mật khẩu cho tài khoản của mình. Vui lòng sử dụng liên kết dưới đây để đặt lại mật khẩu:
                </p>
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password/${resetToken}" style="background-color: #2196F3; color: white; font-size: 16px; font-weight: bold; padding: 12px 24px; border-radius: 8px; text-decoration: none;">
                        Đặt lại mật khẩu
                    </a>
                </div>
                
                <p style="color: #666; font-size: 14px; text-align: center;">
                    Liên kết này sẽ hết hạn sau <strong>1 giờ</strong>
                </p>
                
                <p style="color: #666; font-size: 12px; text-align: center; margin-top: 20px;">
                    Hoặc copy liên kết sau vào trình duyệt:<br>
                    <span style="background-color: #eee; padding: 4px 8px; border-radius: 4px; font-family: monospace;">
                        ${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password/${resetToken}
                    </span>
                </p>
            </div>
            
            <div style="border-top: 1px solid #eee; padding-top: 20px; color: #666; font-size: 12px;">
                <p>Nếu bạn không yêu cầu đặt lại mật khẩu, vui lòng bỏ qua email này.</p>
                <p>Đây là email tự động, vui lòng không trả lời.</p>
            </div>
        </div>
        `;

        await sendEmail(email, 'Đặt lại mật khẩu - TimeTable App', html);

        res.json({ message: 'Reset password email sent successfully' });
    } catch (error) {
        console.log('Forget password error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.resetPassword = async (req, res) => { = require('../models/OtpVertification');
const PasswordReset = require('../models/PasswordReset');
const sendEmail = require('../utils/sendEmail');

exports.register = async (req, res) => {
    try {
        const { name, email, password, timezone, role } = req.body;

        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'Email already exists' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const newUser = new User({
            name,
            email,
            password: hashedPassword,
            timezone,
            role: role && role === 'admin' ? 'admin' : 'user'
        });

        console.log(process.env.JWT_SECRET);

        const token = jwt.sign(
            {
                id: newUser._id,
                email: newUser.email,
                role: newUser.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '7d' }
        );

        res.status(201).json({
            message: 'User registered successfully',
            user: {
                id: newUser._id,
                name: newUser.name,
                email: newUser.email,
                timezone: newUser.timezone,
                role: newUser.role
            },
            token
        });

        await newUser.save();
    } catch (error) {
        console.log('Register error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;

        // Validate email and password
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).json({ message: 'Invalid email or password' });
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
            return res.status(400).json({ message: 'Invalid email or password' });
        }

        // Generate JWT token
        const token = jwt.sign(
            {
                id: user._id,
                email: user.email,
                role: user.role
            },
            process.env.JWT_SECRET,
            { expiresIn: '7d' }
        )

        res.status(200).json({
            message: 'Login successfully',
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                timezone: user.timezone,
                role: user.role
            },
            token
        });
    } catch (error) {
        console.log('Login error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.sendVerificationEmail = async (req, res) => {
    try {
        console.log('=== SEND VERIFICATION EMAIL CALLED ===');
        const { email } = req.body;

        if (!email) {
            return res.status(400).json({ message: 'Email is required' });
        }

        const otp = crypto.randomInt(100000, 999999).toString();
        const expiresAt = new Date(Date.now() + 1.5 * 60 * 1000); // OTP valid for 1.5 minutes

        console.log(`=== OTP GENERATED FOR ${email} ===`);
        console.log(`OTP: ${otp}`);
        console.log(`Expires at: ${expiresAt}`);
        console.log('================================');

        await OtpVerification.findOneAndUpdate(
            { email },
            { otp, expiresAt },
            { upsert: true, new: true }
        );

        const html = `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2196F3; margin-bottom: 10px;">TimeTable App</h1>
                <h2 style="color: #333; margin-bottom: 20px;">Xác nhận email của bạn</h2>
            </div>
            
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                    Chào bạn,
                </p>
                <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                    Bạn đã yêu cầu tạo tài khoản trên TimeTable App. Vui lòng sử dụng mã OTP dưới đây để xác nhận email:
                </p>
                
                <div style="text-align: center; margin: 30px 0;">
                    <div style="background-color: #2196F3; color: white; font-size: 32px; font-weight: bold; padding: 15px 30px; border-radius: 8px; display: inline-block; letter-spacing: 8px;">
                        ${otp}
                    </div>
                </div>
                
                <p style="color: #666; font-size: 14px; text-align: center;">
                    Mã OTP này có hiệu lực trong <strong>90 giây</strong>
                </p>
            </div>
            
            <div style="border-top: 1px solid #eee; padding-top: 20px; color: #666; font-size: 12px;">
                <p>Nếu bạn không yêu cầu tạo tài khoản, vui lòng bỏ qua email này.</p>
                <p>Đây là email tự động, vui lòng không trả lời.</p>
            </div>
        </div>
        `;

        console.log('About to call sendEmail function...');
        console.log('sendEmail type:', typeof sendEmail);

        await sendEmail(email, 'Mã xác nhận TimeTable App - ' + otp, html);

        console.log('Email sent successfully, sending response...');
        res.json({ message: 'OTP sent successfully' });
    } catch (error) {
        console.log('Send verification email error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.verifyOtp = async (req, res) => {
    try {
        const { email, otp } = req.body;

        if (!email || !otp) {
            return res.status(400).json({ message: 'Email and OTP are required' });
        }

        const record = await OtpVerification.findOne({ email });

        if (!record) {
            return res.status(404).json({ message: 'No OTP found for this email' });
        }

        if (record.otp !== otp) {
            return res.status(400).json({ message: 'Invalid OTP' });
        }

        if (record.expiresAt < new Date()) {
            return res.status(400).json({ message: 'OTP has expired' });
        }

        await OtpVerification.deleteOne({ email });
        await User.updateOne(
            { email },
            { emailVerified: true }
        );

        res.json({ message: 'Email verified successfully' });
    } catch (error) {
        console.log('Verify OTP error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.forgetPassword = async (req, res) => {
    try {

        const { email } = req.body;

        if (!email) {
            return res.status(400).json({ message: 'Email is required' });
        }

        // Generate a reset token
        const resetToken = crypto.randomBytes(32).toString('hex');

        // Save the reset token and its expiration time
        await PasswordReset.create({
            email,
            token: resetToken,
            expiresAt: Date.now() + 3600000, // 1 hour
        });

        // Send the reset email
        const html = `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2196F3; margin-bottom: 10px;">TimeTable App</h1>
                <h2 style="color: #333; margin-bottom: 20px;">Đặt lại mật khẩu của bạn</h2>
            </div>

            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                    Chào bạn,
                </p>
                <p style="color: #333; font-size: 16px; margin-bottom: 15px;">
                    Bạn đã yêu cầu đặt lại mật khẩu cho tài khoản của mình. Vui lòng sử dụng liên kết dưới đây để đặt lại mật khẩu:
                </p>

                <div style="text-align: center; margin: 30px 0;">
                    <a href="${process.env.FRONTEND_URL}/reset-password/${resetToken}" style="background-color: #2196F3; color: white; font-size: 16px; font-weight: bold; padding: 12px 24px; border-radius: 8px; text-decoration: none;">
                        Đặt lại mật khẩu
                    </a>
                </div>

                <p style="color: #666; font-size: 14px; text-align: center;">
                    Liên kết này sẽ hết hạn sau <strong>1 giờ</strong>
                </p>
            </div>

            <div style="border-top: 1px solid #eee; padding-top: 20px; color: #666; font-size: 12px;">
                <p>Nếu bạn không yêu cầu đặt lại mật khẩu, vui lòng bỏ qua email này.</p>
                <p>Đây là email tự động, vui lòng không trả lời.</p>
            </div>
        </div>
        `;

        await sendEmail(email, 'Đặt lại mật khẩu - TimeTable App', html);

        res.json({ message: 'Reset password email sent successfully' });
    } catch (error) {
        console.log('Forget password error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

exports.resetPassword = async (req, res) => {
    try {
        const { token, newPassword } = req.body;

        if (!token || !newPassword) {
            return res.status(400).json({ message: 'Token and new password are required' });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({ message: 'Password must be at least 6 characters' });
        }

        // Find reset token
        const resetRecord = await PasswordReset.findOne({ resetToken: token });

        if (!resetRecord) {
            return res.status(404).json({ message: 'Invalid or expired reset token' });
        }

        if (resetRecord.expiresAt < new Date()) {
            return res.status(400).json({ message: 'Reset token has expired' });
        }

        // Find user and update password
        const user = await User.findOne({ email: resetRecord.email });

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await User.updateOne(
            { email: resetRecord.email },
            { password: hashedPassword }
        );

        // Delete used reset token
        await PasswordReset.deleteOne({ resetToken: token });

        res.json({ message: 'Password reset successfully' });
    } catch (error) {
        console.log('Reset password error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};